🧱 ÉTAPES POUR DÉVELOPPER “SKINSIGHT” – PLAN CURSOR AI / CODEX
1. 🧠 Initialisation du projet
Objectif : Créer l’ossature de base de l’extension Chrome.

Crée un dossier skinsight/

Ajoute les fichiers :

manifest.json (manifest V3)

popup.html, popup.js, style.css

content.js

background.js (si tu utilises la gestion d’onglets ou API)

Génère un prompt pour Cursor :
“Créer les fichiers de base d’une extension Chrome Manifest V3 avec popup, content script, background script et style.css”

2. 📝 Déclaration du manifest.json
Objectif : Définir les permissions et scripts.

Permissions :

"tabs", "storage", "scripting"

"https://steamcommunity.com/*" (pour le ciblage Steam)

Actions :

Définir la popup

Déclarer content.js injecté sur les pages Steam

Prompt :
“Définis un manifest.json V3 pour une extension qui injecte content.js sur les pages Steam, avec une popup.html, et les permissions tabs, storage, scripting”

3. 🧭 Détection automatique des amis Steam
Objectif : Parcourir la liste d’amis visible sur la page.

content.js :

Scrute le DOM pour détecter les éléments représentant les amis

Extrait leur SteamID / lien vers le profil

Ignore le profil actif (SteamID actuel)

Prompt :
“Dans content.js, détecte tous les amis listés sur une page Steam et extrait les URLs vers leurs profils en ignorant celui de l’utilisateur actif”

4. 🧼 Exclusion du compte utilisateur
Objectif : Empêcher l’analyse de son propre inventaire.

Deux options :

Lire le SteamID depuis le DOM (profil actif)

Stocker le SteamID de l’utilisateur via une interaction initiale

Prompt :
“Ajoute un mécanisme dans content.js pour reconnaître et exclure l’utilisateur actuel de la liste des amis à scanner (via SteamID ou profil)”

5. 🖱️ Contrôles dans la popup
Objectif : Interface utilisateur simple pour contrôler le scan.

Bouton Start / Stop

Slidebar pour le délai (2 à 15s)

Dropdown pour les 3 modes d’ouverture :

Onglets en background

Onglets séquentiels avec auto-fermeture

Appel API Steam

Prompt :
“Crée une popup.html avec un bouton Start/Stop, un slider pour ajuster un délai en secondes, et un menu déroulant pour choisir un mode de scan”

6. 🔁 Lancement du scan depuis la popup
Objectif : Démarrer le scan en fonction du mode choisi.

Quand Start est cliqué :

Envoie un message à content.js via messaging

Le content script récupère la liste des amis

Envoie à background.js pour ouvrir les inventaires selon le mode

Prompt :
“Dans popup.js, déclenche une action de scan via messaging en fonction des réglages choisis (mode, délai), et affiche l’état (‘Scanning…’ / ‘Paused’)”

7. 🧠 Gestion des 3 modes de scan
Objectif : Adapter le comportement selon le mode sélectionné.

Onglets en background

Utilise chrome.tabs.create({ active: false })

Séquentiel + auto-fermeture

Ouvre un onglet, attends X secondes, puis ferme

Enchaîne avec le suivant

API Steam publique

Utilise https://steamcommunity.com/inventory/<SteamID>/730/2 (si l’inventaire est public)

Prompt :
“Crée un background.js capable de gérer trois modes d’ouverture de liens d’inventaire selon une liste fournie et un délai défini”

8. 💾 Stockage des préférences
Objectif : Garder les choix utilisateur entre les sessions.

Stocker dans chrome.storage.local :

Délai

Mode sélectionné

SteamID (si nécessaire)

Prompt :
“Utilise chrome.storage.local pour enregistrer les préférences de l’utilisateur (délai, mode, SteamID) et les charger automatiquement dans la popup”

9. 🚨 Gestion des erreurs
Objectif : Anticiper les cas où rien ne se passe.

Exemples :

Aucune liste d’amis détectée

SteamID non trouvé

Inventaire privé ou non accessible

Prompt :
“Ajoute un système de feedback dans la popup pour afficher des messages d’erreur (‘Aucun ami détecté’, ‘Erreur d’ouverture’, etc.)”

10. 🎨 Amélioration UI / UX
Objectif : Rendre la popup agréable et claire.

Couleurs inspirées de Steam (gris foncé, vert fluo, bleu)

Icônes ou emojis pour le feedback

Police sobre, éléments centrés

Taille max 400x600px

Prompt :
“Stylise la popup avec un thème sombre inspiré de Steam, en utilisant du CSS responsive et des couleurs sobres”

11. 🧪 Tests finaux et débogage
Objectif : Vérifier le bon fonctionnement de bout en bout.

Teste sur plusieurs profils Steam

Vérifie les 3 modes

Contrôle l’exclusion du compte

Observe la performance (pas de spam, pas de blocage Steam)

Prompt :
“Ajoute des logs ou alertes pour surveiller le bon déroulement du scan et détecter les erreurs éventuelles”

12. 📦 Build & Publication
Objectif : Préparer pour le Chrome Web Store (ou usage local)

Zip du dossier final

Fichier README avec instructions

Vérification conformité Manifest V3

Prompt :
“Prépare les fichiers pour publication sur le Chrome Web Store avec nom, description, icône, et respect des standards 2025”

✅ Résumé des 12 étapes
Initialisation des fichiers

Configuration du manifest.json

Détection DOM des amis Steam

Exclusion de son propre compte

Création UI popup (boutons, slider, dropdown)

Connexion popup ↔ content ↔ background

Gestion des 3 modes de scan

Stockage des préférences utilisateur

Gestion d’erreurs

Design UI cohérent avec Steam

Tests et débogage

Build et publication
